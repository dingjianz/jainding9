{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createContext, useReducer } from 'react';\nexport const MyContext = /*#__PURE__*/createContext();\nconst initState = {\n  name: '默认name',\n  age: '默认age'\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setname':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: action.name\n      });\n\n    case 'setage':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        age: action.age\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const HocComponent = props => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initState);\n  return /*#__PURE__*/_jsx(MyContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: props.children\n  });\n};","map":null,"metadata":{},"sourceType":"module"}